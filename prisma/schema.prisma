// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId String @unique
  email String @unique
  firstname String? @unique 
  lastname String? @unique
  createdAt DateTime @default(now()) 
  subscription Subscription?
  integrations Integrations[]
  automations Automation[]
}

model Subscription {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique @db.Uuid
  createdAt DateTime @default(now())
  plan SUBSCRIPTION_PLAN @default(FREE)
  updatedAt DateTime @default(now())
  customerId String?
}

model Integrations {
  id String @id @default(dbgenerated("gen_random_uuid")) @db.Uuid
  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.Uuid
  name INTEGRATIONS @default(INSTAGRAM)
  createdAt DateTime @default(now())
  token String @unique
  expiresAt DateTime?
  instagramId String? @unique
}


model Automation {
  id String @id @dbgenerated("gen_random_uuid()") @db.Uuid
  name String @default("Untitled")
  createdAt DateTime @default(now())
  active Boolean @default(false)
  trigger Trigger[]
  listener Listener?
  posts Posts[]
  dms Dms[]
  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.Uuid
  keywords Keyword[]
}

model Dms {
  id String @id @dbgenerated("gen_random_uuid()") @db.Uuid
  Automation Automation? @relation(fields: [automationId], references: [id])
  automationId String? @db.Uuid 
  createdAt DateTime @default(now())
  senderId String?
  receiver String?
  message  String?
}

model Post {
  id String @id @dbgenerated("gen_random_uuid()") @db.Uuid
  postId String
  caption String?
  media String
  mediaType MEDIATYPE @default(IMAGE)
  Automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String? @db.Uuid 
}

model Listener {
  id String @id @dbgenerated("gen_random_uuid()") @db.Uuid
  Automation Automation @relation(fields:[automationId], references: [id], onDelete: Cascade)
  automationId String @unique @db.Uuid 
  listener LISTNER @default(MESSAGE)
  prompt String
  commentReply String?
  dmCount Int @default(0)
  commentCount Int @default(0)
}

model Trigger {
  id String @id @dbgenerated("gen_random_uuid()") @db.Uuid
  type String 
  Automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String? @db.Uuid 
}

model Keyword {
  
  id String @id @dbgenerated("gen_random_uuid()") @db.Uuid
  word String 
  Automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String? @db.Uuid 
  
  @@unique([automationId, word]) // user cant use same keyword for multiple automation
}

enum LISTNER {
  SMARTAI
  MESSAGE
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum INTEGRATIONS {
  INSTAGRAM
}

enum SUBSCRIPTION_PLAN {
  FREE
  PRO
}


